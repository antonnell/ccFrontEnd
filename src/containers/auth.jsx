import React from "react";
import AuthComponent from "../components/authComponent";

import createReactClass from "create-react-class";
let emitter = require("../store/accountStore.js").default.emitter;
let dispatcher = require("../store/accountStore.js").default.dispatcher;

let Auth = createReactClass({
  getInitialState() {
    return {
      loading: false,
      error: null,

      code1: "",
      code2: "",
      code3: "",
      code4: "",
      code5: "",
      code6: "",

      codeArray: [],
      code: "",
      codeError: false,
      codeErrorMessage: false,
      codeValid: false
    };
  },

  componentWillMount() {
    emitter.on("loginOTP", this.loginReturned);
  },

  componentWillUnmount() {
    emitter.removeAllListeners("loginOTP");
  },

  render() {
    return (
      <AuthComponent
        handleChange={this.handleChange}
        submitLogin={this.submitLogin}
        onLoginKeyDown={this.onLoginKeyDown}
        code1={this.state.code1}
        code2={this.state.code2}
        code3={this.state.code3}
        code4={this.state.code4}
        code5={this.state.code5}
        code6={this.state.code6}
        code={this.state.code}
        codeError={this.state.codeError}
        codeErrorMessage={this.state.codeErrorMessage}
        codeValid={this.state.codeValid}
        loading={this.state.loading}
        error={this.state.error}
      />
    );
  },

  isNumeric(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  },

  handleChange(event, name) {
    if (event != null && event.target != null) {
      if (name.indexOf("code") > -1) {
        if (!this.isNumeric(event.target.value)) {
          return false;
        }

        var codeArray = null;
        if (event.target.value.length <= 1) {
          this.setState({
            [name]: event.target.value
          });

          var index = name.substring(4);
          codeArray = this.state.codeArray;
          codeArray[index - 1] = event.target.value;
          this.setState({ codeArray, code: codeArray.join("") });
          if (index < 6 && event.target.value.length === 1) {
            document.getElementById("code" + (Number(index) + 1)).focus();
          }
        } else if (event.target.value.length === 6) {
          codeArray = event.target.value.split("");
          var state = {
            code1: codeArray[0],
            code2: codeArray[1],
            code3: codeArray[2],
            code4: codeArray[3],
            code5: codeArray[4],
            code6: codeArray[5],
            codeArray,
            code: event.target.value
          };
          document.getElementById("code6").focus();
          this.setState(state);
        }

        if (codeArray && codeArray.length === 6) {
          this.validateAuthCode(codeArray.join(""));
        }
      }
    }
  },

  validateAuthCode(code) {
    if (code.length === 6 && this.isNumeric(code)) {
      this.setState({ codeValid: true });
    } else {
      this.setState({ codeValid: false });
    }
  },

  onLoginKeyDown(event) {
    if (event.which === 13) {
      this.submitLogin();
    } else if (event.which === 8) {
      const name = event.target.id;
      if (name.indexOf("code") > -1) {
        const index = name.substring(4);

        const codeArray = this.state.codeArray;
        if (this.state[name].length > 0) {
          codeArray[index - 1] = "";

          this.setState({ codeArray, code: codeArray.join(""), [name]: "" });
          if (index > 1) {
            document.getElementById(name).focus();
          }
        } else {
          codeArray[index - 2] = "";

          this.setState({
            codeArray,
            code: codeArray.join(""),
            ["code" + (Number(index) - 1)]: ""
          });
          if (index > 1) {
            document.getElementById("code" + (Number(index) - 1)).focus();
          }
        }
      }
    }
  },

  submitLogin() {
    this.setState({
      codeErrorMessage: ""
    });
    let error = false;

    if (this.state.code === "" || this.state.code.length !== 6) {
      this.setState({
        codeError: true,
        codeErrorMessage:
          "The 6 digit code generated by your authenticator application"
      });
      error = true;
    }

    if (!error) {
      this.setState({ loading: true, error: null });
      this.props.setError(null)

      this.props.startLoading()
      var content = this.props.credentials;
      dispatcher.dispatch({ type: "loginOTP", content, authOTP: this.state.code });
    }
  },

  loginReturned(error, data) {
    this.setState({ loading: false });
    this.props.stopLoading()

    if (error) {
      this.props.setError(error.toString())
      return this.setState({ error: error.toString() });
    }

    if (data.success) {
      data.user.token = data.token;
      data.user.authOTP = this.state.code;
      data.user.verificationResult = data.verificationResult;
      data.user.verificationUrl = data.verificationUrl;
      data.user.whitelistStatus = data.whitelistStatus;
      this.props.setUser(data.user);

      // not called anymore, we included it in the original login call
      // var whitelistContent = { emailAddress: data.user.email, password: this.state.password };
      // whitelistDispatcher.dispatch({type: 'whitelistLogin', content: whitelistContent });
      if (data.user.username === data.user.email) {
        window.location.hash = "setUsername";
      } else {
        window.location.hash = "accounts";
      }
    } else if (data.errorMsg) {
      this.setState({ error: data.errorMsg });
      this.props.setError(data.errorMsg)
    } else {
      this.setState({ error: data.statusText });
      this.props.setError(data.statusText)
    }
  }
});


export default Auth;
